public class BitOperator {
    
    public static void main(String[] args) {
        

        System.out.println(2&3); // 2
/*
 * 推导过程 
 * 1.先得到2的补码  => 2的原码 00000000 00000000 00000000 00000010
 *   2的补码 00000000 00000000 00000000 00000010
 * 2.3的补码，3的原码   00000000 00000000 00000000 00000011
 *   3的补码  00000000 00000000 00000000 00000011
 * 3.按位&
 *  00000000 00000000 00000000 00000010
 *  00000000 00000000 00000000 00000011
 *  00000000 00000000 00000000 00000010  & 运算后的补码
 * 运算后的原码也是 00000000 00000000 00000000 00000010
 * 结果是2
 */

       System.out.println(~-2); // 1
/*推导过程
1.先得到-2的补码 => -2的原码  10000000 00000000 00000000 00000010
  -2的补码 ，先求-2的反码     11111111 11111111 11111111 11111101
    -2的补码 = 反码 +1  =>   11111111 11111111 11111111 11111110
2.按位取反~
  00000000 00000000 00000000 00000001 补码的运算结果
  运算后的原码 也是 00000000 00000000 00000000 00000001
  结果为1
  


*/
        System.out.println(~2); // -3
/*推导过程
 1.先得到2的补码 => 2的原码 00000000 00000000 00000000 00000010
  2的补码 00000000 00000000 00000000 00000010
 2.按位取反～
 11111111 11111111 11111111 11111101 运算后的补码（按位取反）
 反码 = 补码 -1 =>  11111111 11111111 11111111 11111100
                   10000000 00000000 00000000 00000011 原码
    结果为-3
 */

        System.out.println(2|3); // 3
/*推导过程 
 * 1.先得到2的补码  => 2的原码 00000000 00000000 00000000 00000010
 *   2的补码 00000000 00000000 00000000 00000010
 * 2.3的补码，3的原码  00000000 00000000 00000000 00000011
 *   3的补码  00000000 00000000 00000000 00000011
 * 3.按位|
 *  00000000 00000000 00000000 00000010
 *  00000000 00000000 00000000 00000011
 *  00000000 00000000 00000000 00000011  | 运算后的补码
 * 运算后的原码也是 00000000 00000000 00000000 00000011
 * 结果是3
 * 
 */



        System.out.println(2^3); // 1
/*推导过程
 1.先得到2的补码 => 2的原码 00000000 00000000 00000000 00000010
  2的补码 00000000 00000000 00000000 00000010
 2.3的补码，3的原码  00000000 00000000 00000000 00000011
  3的补码  00000000 00000000 00000000 00000011
 3.按位异^
 00000000 00000000 00000000 00000010
 00000000 00000000 00000000 00000011
 00000000 00000000 00000000 00000001 ^ 运算后的补码 
 运算后的原码也是 00000000 00000000 00000000 00000001
结果是1
 
 */




    }
}
